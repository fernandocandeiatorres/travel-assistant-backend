version: "3.8"

services:
  # --- INFRAESTRUTURA COMPARTILHADA ---

  postgres:
    image: "postgres:16-alpine"
    container_name: postgres_db
    environment:
      - "POSTGRES_PASSWORD=secret"
      - "POSTGRES_USER=myuser"
      # Usar um banco padrão genérico para evitar conflito com o script
      - "POSTGRES_DB=postgres" # Banco padrão do PostgreSQL
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Script para criar múltiplos bancos de dados
      - ./db-init:/docker-entrypoint-initdb.d

  rabbitmq:
    image: "rabbitmq:3-management-alpine"
    container_name: rabbitmq
    environment:
      - "RABBITMQ_DEFAULT_PASS=secret"
      - "RABBITMQ_DEFAULT_USER=myuser"
    ports:
      - "5672:5672"
      - "15672:15672"

  redis:
    image: "redis:7-alpine"
    container_name: redis_cache
    ports:
      - "6379:6379"

  # --- MICROSSERVIÇOS DA APLICAÇÃO ---
  # Comentado para executar localmente na máquina

  # trip-service:
  #   # O 'build' diz ao Docker Compose para construir a imagem
  #   # usando o Dockerfile dentro da pasta especificada.
  #   build:
  #     context: ./trip-service
  #     dockerfile: Dockerfile
  #   container_name: trip-service-app
  #   ports:
  #     - "8000:8000" # Mapeia a porta 8000 do contêiner para a 8000 da sua máquina
  #   environment:
  #     # Configurações para conectar com a infraestrutura DENTRO da rede Docker
  #     - SERVER_PORT=8000
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/trip_service_db
  #     - SPRING_DATASOURCE_USERNAME=myuser
  #     - SPRING_DATASOURCE_PASSWORD=secret
  #     - SPRING_RABBITMQ_HOST=rabbitmq
  #   depends_on:
  #     - postgres
  #     - rabbitmq
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--quiet",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:8000/actuator/health",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # suggestion-service:
  #   build:
  #     context: ./suggestion-service
  #     dockerfile: Dockerfile
  #   container_name: suggestion-service-app
  #   ports:
  #     - "8010:8010"
  #   environment:
  #     - SERVER_PORT=8010
  #     - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/suggestion_service_db
  #     - SPRING_DATASOURCE_USERNAME=myuser
  #     - SPRING_DATASOURCE_PASSWORD=secret
  #     - SPRING_RABBITMQ_HOST=rabbitmq
  #     - SPRING_DATA_REDIS_HOST=redis
  #   depends_on:
  #     - postgres
  #     - rabbitmq
  #     - redis
  #   restart: unless-stopped
  #   healthcheck:
  #     test:
  #       [
  #         "CMD",
  #         "wget",
  #         "--quiet",
  #         "--tries=1",
  #         "--spider",
  #         "http://localhost:8010/actuator/health",
  #       ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

# Define um volume nomeado para persistir os dados do PostgreSQL
volumes:
  postgres_data:
